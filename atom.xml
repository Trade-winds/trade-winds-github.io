<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王以杰的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://trade-winds.github.io/"/>
  <updated>2018-02-04T08:00:27.303Z</updated>
  <id>https://trade-winds.github.io/</id>
  
  <author>
    <name>Trade_winds</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 数据存储</title>
    <link href="https://trade-winds.github.io/2018/02/01/android-storage/"/>
    <id>https://trade-winds.github.io/2018/02/01/android-storage/</id>
    <published>2018-02-01T08:23:17.030Z</published>
    <updated>2018-02-04T08:00:27.303Z</updated>
    
    <content type="html"><![CDATA[<p>Android系统存储主要分为内部存储和外部存储<a id="more"></a>    </p><h3 id="内部存储"><a href="#内部存储" class="headerlink" title="内部存储"></a>内部存储</h3><p>内部存储主要是应用的私有存储空间，主要是程序的<code>/data/data/</code>目录或者<code>/data/user/x/</code>（Android 6.0及以上）,对于设备安装的每一个应用，系统都会在内部存储空间为其分配本应用特有的私有空间，如果这个应用被删掉，那么相应的内部私有存储空间也会相应的删除掉。</p><p>内存存储的主要目录：(Android 6.0y以上目录)</p><table><thead><tr><th style="text-align:center">目录</th><th style="text-align:center">获取路径代码</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">/data/user/0/package_name/files</td><td style="text-align:center">getFilesDir()</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">/data/user/0/package_name/cache</td><td style="text-align:center">getCacheDir</td><td style="text-align:center">缓存目录</td></tr><tr><td style="text-align:center">/data/user/0/package_name/shared_prefs</td><td style="text-align:center"></td><td style="text-align:center">SharedPrederence文件存放目录</td></tr><tr><td style="text-align:center">/data/user/0/package_name/database</td><td style="text-align:center"></td><td style="text-align:center">数据库目录</td></tr></tbody></table><h3 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h3><p>外部存储又分为公有目录和私有目录 ；目录一般是<code>/storage/emulated/0</code>,(如果外部存储有SD卡，则目录可能不一致,有SD卡一般为：<code>/mnt/sdcard/</code>)，外部存储需要读写权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//向SD卡中写入数据权限</span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外部存储一般使用之前一般需要判断是否可用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><h4 id="公有目录"><a href="#公有目录" class="headerlink" title="公有目录"></a>公有目录</h4><p>公有目录的数据不会随着应用的删除而清除，所以可以存放那些不用删除的数据；公有目录有十大类目录，获取目录方式：<code>Environment.getExternalStoragePublicDirectory(String type)</code>获取，函数参数:</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo4h182o15j31b80o07bc.jpg" alt=""></p><p><strong>注意：参数不能为空，否则会报错</strong>，可以根据对应目录的名称存放相应的数据</p></li><li><h4 id="私有目录"><a href="#私有目录" class="headerlink" title="私有目录"></a>私有目录</h4><p>通过Google建议我们将应用的数据存放在外部存储中的私有目录，因为内部存储空间主要是系统生成的文件进行存储，例如数据库文件，WebView缓存以及SharedPreferences文件等，并且内部存储空间有限，并且外部存储空间的私有目录也会随着应用的删除而清除；</p><p>私有目录一般有：</p><ol><li><code>/storage/emulated/0/Android/data/package_name/files</code>,获取方式：<code>getExternalFilesDir(String type)</code>来获取，目录形式类似于公有目录的形式，只是目录结构略有不同，例如共有目录为：<code>/storage/emulated/0/Pictures</code>，对应参数的私有目录为<code>/storage/emulated/0/Android/data/package_name/files/Pictures</code>,此处不再一一列举。</li><li><code>/storage/emulated/0/Android/data/package_name/cache</code>,获取方式：<code>getExternalCacheDir()</code></li></ol></li></ol><h3 id="内部存储和外部存储的私有目录的区别："><a href="#内部存储和外部存储的私有目录的区别：" class="headerlink" title="内部存储和外部存储的私有目录的区别："></a>内部存储和外部存储的私有目录的区别：</h3><p>内部存储的目录结构和外部存储的私有目录的结构很相似，并且都会在应用被删除以后把目录清除掉，但是还有有许多不同的：</p><ol><li>默认情况下，系统并不会自动创建外部存储空间的私有目录的，只有在应用需要时，开发人员通过系统提供的API创建文件目录，而内部存储会在应用安装时就会创建</li><li>宿主 App 可以直接读写内部存储空间中的应用私有目录；而在 4.4 版本开始，宿主 App 才可以直接读写外部存储空间中的应用私有目录，使开发人员无需在 Manifest 文件中或者动态申请外部存储空间的文件读写权限</li><li>自 Android 7.0 开始，系统对应用私有目录的访问权限进一步限制。其他 App 无法通过 file:// 这种形式的 Uri 直接读写该目录下的文件内容，而是通过 FileProvider 访问</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android系统存储主要分为内部存储和外部存储
    
    </summary>
    
      <category term="Android" scheme="https://trade-winds.github.io/categories/Android/"/>
    
    
      <category term="Andorid" scheme="https://trade-winds.github.io/tags/Andorid/"/>
    
  </entry>
  
  <entry>
    <title>Android View.post() 原理解析</title>
    <link href="https://trade-winds.github.io/2018/01/22/android-view-post/"/>
    <id>https://trade-winds.github.io/2018/01/22/android-view-post/</id>
    <published>2018-01-22T03:22:59.000Z</published>
    <updated>2018-02-01T07:10:45.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    Android日常开发中经常需要在<code>onCreate()</code>方法中去获取<strong>View</strong>的宽和高，我们知道在<code>onCreate</code>中，是无法直接使用<code>getWidth()</code>、<code>getHeight()</code>、<code>getMeasuredWidth()</code>、<code>getMeasuredHeight()</code>来直接获取宽高的，这些方法通常的返回值都是0。常用的能正确获取宽高的方法有使用<code>ViewTreeObserver. OnGlobalLayoutListener</code>或者使用<code>View.post</code>，这篇文章，就来分析一下为什么在<code>onCreate()</code>方法中使用<code>View.post</code>方法能够正确获取<strong>View</strong>的宽和高。<a id="more"></a></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">view.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        view.getWidth(); <span class="comment">// 获取宽度</span></span><br><span class="line">        view.getHeight(); <span class="comment">// 获取高度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>回忆一下<code>Activity</code>的启动过程，在<code>onCreate</code>方法回调时，<code>Activity</code>的视图还没有进行加载，那么视图中的View也就还没有进行<code>onMeasure()</code>、<code>onLayout()</code>、<code>onDraw()</code>过程,所以无法直接在<code>onCreate()</code>方法中直接获取View的宽和高。那么<code>View.post()</code>方法是如何做到的呢？</p><ol><li><h4 id="View-post"><a href="#View-post" class="headerlink" title="View.post()"></a>View.post()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</span><br><span class="line">    <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> attachInfo.mHandler.post(action);</span><br><span class="line">    &#125;</span><br><span class="line">    getRunQueue().post(action);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>post()</code>中，先判断mAttachInfo是否为null，若为null 则执行<code>getRunQueue().post(action);</code>不为<code>null</code>,则执行<code>return attachInfo.mHandler.post(action);</code> 在View中，mAttachInfo的赋值只有一处，在方法 <code>dispatchAttachedToWindow(AttachInfo info, int visibility)</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchAttachedToWindow</span><span class="params">(AttachInfo info, <span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">    mAttachInfo = info;</span><br><span class="line">    ....</span><br><span class="line">    performCollectViewAttributes(mAttachInfo, visibility);</span><br><span class="line">    onAttachedToWindow();</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而dispatchAttachedToWindow只在ViewRootImpl的performTraversals()方法中调用，我们都知道performTraversals()方法是在开始执行View的测量布局渲染工作的时候才执行的，那么在执行Activity的<code>onCreate()</code>方法时，mAttachInfo就还没有进行赋值，那么此时mAttachInfo为null，就会执行<code>getRunQueue().post(action);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HandlerActionQueue <span class="title">getRunQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mRunQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mRunQueue = <span class="keyword">new</span> HandlerActionQueue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mRunQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getRunQueue()</code>返回 HandlerActionQueue的实例，接着看HandlerActionQueue源码</p></li><li><p>####HandlerActionQueue.post(Runnable action)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">    postDelayed(action, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，接着看 <code>postDelayed(Runnable action, long delayMillis)</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postDelayed</span><span class="params">(Runnable action, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> HandlerAction handlerAction = <span class="keyword">new</span> HandlerAction(action, delayMillis);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mActions == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mActions = <span class="keyword">new</span> HandlerAction[<span class="number">4</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        mActions = GrowingArrayUtils.append(mActions, mCount, handlerAction);</span><br><span class="line">        mCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实<code>HandlerActionQueue</code>就是当当前View还没有绑定一个Handler（主线程Handler）时，用来存放待执行的Runnable的，但它并不会像MessageQueue会在Looper中循环执行。在<code>postDelayed()</code>中，可以看到我们的Runnable代码只是没封装了一层，然后放到一个数组中。那么代码是在什么时候执行的？代码的执行是在HandlerActionQueue.executeActions(Handler handler)方法中，而HandlerActionQueue.executeActions是在ViewRootImpl方法中调用的，我们再看调用的代码</p></li><li><h4 id="ViewRootImpl-performTraversals"><a href="#ViewRootImpl-performTraversals" class="headerlink" title="ViewRootImpl.performTraversals()"></a>ViewRootImpl.performTraversals()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// cache mView since it is used so much below...</span></span><br><span class="line">       <span class="keyword">final</span> View host = mView;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里面做了一些初始化的操作，第一次执行和后面执行的操作不一样，这里不关</span></span><br><span class="line">    <span class="comment">// 心过多的东西，主要关心attachInfo在此处被初始化完成</span></span><br><span class="line"></span><br><span class="line">    getRunQueue().executeActions(attachInfo.mHandler);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    performMeasure();</span><br><span class="line">    ...</span><br><span class="line">    performLayout();</span><br><span class="line">    ...</span><br><span class="line">    performDraw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>performTraversals是整个View树绘制流程的发起者，就是说从<code>ViewRootImpl.performTraversals()</code>才开始执行View的测量布局绘画工作，然后再讲数据显示到屏幕上；从上述代码上看<code>getRunQueue().executeActions(attachInfo.mHandler)</code>似乎是先于View的测量执行的，那么为什么还能获取到View的宽和高的正确数据呢？实际上<code>HandlerActionQueue.executeActions(Handler handler)</code>方法中，实际上是将我们的Runnable代码交给Handler代码来执行，看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeActions</span><span class="params">(Handler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> HandlerAction[] actions = mActions;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = mCount; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> HandlerAction handlerAction = actions[i];</span><br><span class="line">            handler.postDelayed(handlerAction.action, handlerAction.delay);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mActions = <span class="keyword">null</span>;</span><br><span class="line">        mCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ViewRootImpl.performTraversals()</code>方法中，执行<code>getRunQueue().executeActions(mAttachInfo.mHandler);</code>传入了Handler，而这个Handler我们从ViewRootImple的代码中可知是主线程的Handler，那么我们的Runnable代码就是在主线程执行的，但是到这里依然没办法解释为什么<code>getRunQueue().executeActions(mAttachInfo.mHandler);</code>执行看似早于performMeasure()但是却还能获取到View的宽和高；其实看似这一句代码的执行早于performMeasure()，也只是“看似”，实际上这一句代码实在performTraversals()的主要代码都执行完毕以后才执行的，现在就来分析一下：</p><p>我们分析performTraversals()的调用者，能追溯到scheduleTraversals(),发现performTraversals()的执行也是被封装成一个Runnable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTraversal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mTraversalScheduled) &#123;</span><br><span class="line">            mTraversalScheduled = <span class="keyword">false</span>;</span><br><span class="line">            mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">                Debug.startMethodTracing(<span class="string">"ViewAncestor"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">/**重点执行语句**/</span></span><br><span class="line">            performTraversals();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">                Debug.stopMethodTracing();</span><br><span class="line">                mProfile = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        doTraversal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">final</span> TraversalRunnable mTraversalRunnable = <span class="keyword">new</span> TraversalRunnable();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mTraversalScheduled) &#123;</span><br><span class="line">            mTraversalScheduled = <span class="keyword">true</span>;</span><br><span class="line">            mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class="line">            mChoreographer.postCallback(</span><br><span class="line">                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (!mUnbufferedInputDispatch) &#123;</span><br><span class="line">                scheduleConsumeBatchedInput();</span><br><span class="line">            &#125;</span><br><span class="line">            notifyRendererOfFramePending();</span><br><span class="line">            pokeDrawLockIfNeeded();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>一路追到scheduleTraversals()方法，发现执行了<code>mChoreographer.postCallback(</code><br>​                    <code>Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);</code> Choreographer本质上也类似于一个Handler，并且也是绑定主线程的Looper，现在关系就比较清晰了，即performTraversals的执行也是以Runnable的形式发送消息至主线程消息队列然后执行，那么在performTraversals()中再将我们通过View.post()添加到主线程的Runnable，就需要等待performTraversals()的代码执行完毕以后才能执行，那么我们的Runnable代码就只能在执行完View的测量布局绘制以后才能执行，那么此时我们就能正确的获取到View的宽和高了，至此源码分析完毕</p></li></ol><h3 id="View-post-获取的宽高是否准确？"><a href="#View-post-获取的宽高是否准确？" class="headerlink" title="View.post()获取的宽高是否准确？"></a>View.post()获取的宽高是否准确？</h3><p>​    看一段测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPostTwoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindView</span>(R.id.view_post_tv)</span><br><span class="line">    MyTextView myTextView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_view_post_two);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        myTextView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"mrwang"</span>, <span class="string">"ViewPostTwoActivity--initView: --------&gt;"</span> + <span class="string">"width: "</span> + myTextView.getMeasuredWidth()</span><br><span class="line">                        + <span class="string">"- height:"</span> + myTextView.getMeasuredHeight());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTextView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        Log.i(<span class="string">"mrwang"</span>,<span class="string">"MyTextView--onMeasure: --------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        Log.i(<span class="string">"mrwang"</span>, <span class="string">"MyTextView--onLayout: --------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        Log.i(<span class="string">"mrwang"</span>, <span class="string">"MyTextView--onDraw: --------&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo0st8qgthj30os0790vd.jpg" alt=""></p><p>我们发现在执行过获取View宽高的代码之后，貌似系统还又重新执行了View的测量布局绘画工作，我们大概都了解有时候View的绘制工作并不是依次能够成功的，所以有时会重新发消息到主线程再执行绘制工作，有可能导致View的宽或高以及位置可能发生变化，这个消息就会排在View.post()发送的消息的后边，那么就会出现上图的情况，所以View.post()获取的宽高不一定百分百准确</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>​    总结一下，就是在onCreate中使用View.post()获取View的宽或高时，View会先将Runnable代码放入一个队列之中，待到ViewRootImpl执行View的绘制流程时即performTraversals()方法时将获取宽高的代码放入主线程的消息队列之中，又因为performTraversals()方法本身就是通过主线程的消息队列执行的，所以当执行完performTraversals()方法也就是View的绘制流程以后，才能执行我们获取View宽高的代码，这就是View.post()能获取View宽高的原因</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    Android日常开发中经常需要在&lt;code&gt;onCreate()&lt;/code&gt;方法中去获取&lt;strong&gt;View&lt;/strong&gt;的宽和高，我们知道在&lt;code&gt;onCreate&lt;/code&gt;中，是无法直接使用&lt;code&gt;getWidth()&lt;/code&gt;、&lt;code&gt;getHeight()&lt;/code&gt;、&lt;code&gt;getMeasuredWidth()&lt;/code&gt;、&lt;code&gt;getMeasuredHeight()&lt;/code&gt;来直接获取宽高的，这些方法通常的返回值都是0。常用的能正确获取宽高的方法有使用&lt;code&gt;ViewTreeObserver. OnGlobalLayoutListener&lt;/code&gt;或者使用&lt;code&gt;View.post&lt;/code&gt;，这篇文章，就来分析一下为什么在&lt;code&gt;onCreate()&lt;/code&gt;方法中使用&lt;code&gt;View.post&lt;/code&gt;方法能够正确获取&lt;strong&gt;View&lt;/strong&gt;的宽和高。
    
    </summary>
    
      <category term="Android" scheme="https://trade-winds.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://trade-winds.github.io/tags/Android/"/>
    
      <category term="View" scheme="https://trade-winds.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Java补零扩展和补符号扩展</title>
    <link href="https://trade-winds.github.io/2017/09/12/java-type-coversion/"/>
    <id>https://trade-winds.github.io/2017/09/12/java-type-coversion/</id>
    <published>2017-09-11T16:50:21.000Z</published>
    <updated>2018-01-01T08:58:59.201Z</updated>
    
    <content type="html"><![CDATA[<p>java中没有无符号类型，所以Java的类型转换中的扩展都是补符号扩展，当低长度的类型扩展至高长度类型时，如果是正数，因为符号位为0，则在高位补0；如果是负数，符号位为1，则需要在高位补1，这样才能保证不管何种类型，数字的值都是没有改变的。<br><a id="more"></a><br>例如，对于<code>byte b = 1;</code>,其二进制补码为<strong>10000001</strong>,当转换为<strong>int</strong>类型时，其二进制补码为<strong>00000000 00000000 00000000 00000001</strong>；<br>对于<code>byte b = -127;</code>,其二进制补码为<strong>10000001</strong>,当转换为<strong>int</strong>类型时，其二进制补码为<strong>11111111 11111111 11111111 10000001</strong>.<br>对于普通的Java类型转换，符号位扩展并没有特别大的意义。但是对于下边这种情况，就非常有意义:<br><strong>对于<code>byte[] bytes = {-1, -2, -3, -4}</code>,转换成<code>short[]</code>,<code>short[0]</code>和<code>short[1]</code>分别为多少？</strong><br>这个问题的思路就是移位操作，在进行合并组合即可，代码如下：<br>代码1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = &#123;-<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">short</span>[] shorts = <span class="keyword">new</span> <span class="keyword">short</span>[<span class="number">2</span>];</span><br><span class="line">shorts[<span class="number">0</span>] = (<span class="keyword">short</span>) ((bytes[<span class="number">0</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> | (bytes[<span class="number">1</span>] &amp; <span class="number">0xFF</span>));</span><br><span class="line">shorts[<span class="number">1</span>] = (<span class="keyword">short</span>) ((bytes[<span class="number">2</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> | (bytes[<span class="number">3</span>] &amp; <span class="number">0xFF</span>));</span><br><span class="line">System.out.println(shorts[<span class="number">0</span>]);</span><br><span class="line">System.out.println(shorts[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure></p><p>这里最重要的一点儿就是<code>&amp; 0xFF</code>,这么做的意义在什么地方？先看如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = -<span class="number">127</span>;</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="keyword">int</span> i = b &amp; <span class="number">0xFF</span>;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure></p><p>代码执行结果如下：<br><img src="http://ok16gn2ql.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-10%2022.50.11.png" alt=""><br>为什么会出现这种结果？下面我们来分析一下：<br><strong>首先，需要明白的一点，对于操作数位数低于<code>int</code>类型的，在进行运算符计算的时候默认会自动转换为<code>int</code>类型再进行计算</strong><br>那么对于<code>b &amp; 0xFF</code>,变量b的二进制补码为：10000001,转化为<code>int</code>类型二进制补码为：11111111 11111111 11111111 10000001，0xFF的二进制补码为：11111111。那么实际运算过程为<code>11111111 11111111 11111111 10000001 &amp; 11111111</code>,结果为：0000000 00000000 00000000 10000001，而不是-127的二进制补码，实际值是<code>int</code>类型的129；  </p><p>我们接着分析代码1,先看一下代码执行结果：<br><img src="http://ok16gn2ql.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-11%2021.47.29.png" alt=""><br>我们看一下主要代码：<br><code>bytes[0] = -1</code>二进制补码为：11111111<br><code>bytes[1] = -2</code>的二进制补码为：11111110<br>如果代码不执行<code>bytes[0] &amp; 0xFF</code>（结果为：00000000 00000000 00000000 11111111）而是直接进行<code>bytes[0] &lt;&lt; 8</code>（结果为：11111111111111111111111100000000）运算，那么<code>(bytes[0] &amp; 0xFF) &lt;&lt; 8 | (bytes[1] &amp; 0xFF)</code>计算就会变成11111111111111111111111100000000|11111111111111111111111111111110,这样我们会发现，这已经不是我们想要的计算结果了，这是因为符号位扩展导致的。我们实际想要的计算过程是00000000000000001111111100000000|00000000000000000000000011111110。而这可以通过<code>&amp; 0xFF</code>,<code>bytes[0]</code>通过和00000000000000000000000011111111（即0xFF）进行<code>&amp;</code>运算获得；这就是为什么我们要在计算的时候执行<code>&amp; 0xFF</code>运算；</p><p><strong>最后：</strong> 对于代码计算中，经常会碰到这种需要把低位类型合并高位类型进行位运算的情况，由于java类型扩展是补符号位扩展，那么就会导致有时在进行位运算时经过类型扩展的二进制补码并不是原补码，导致计算错误，所以就可以通过<code>&amp;0xFF</code>这种形式的计算，只保留原来正确的补码位数来进行计算，保证计算的正确性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java中没有无符号类型，所以Java的类型转换中的扩展都是补符号扩展，当低长度的类型扩展至高长度类型时，如果是正数，因为符号位为0，则在高位补0；如果是负数，符号位为1，则需要在高位补1，这样才能保证不管何种类型，数字的值都是没有改变的。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://trade-winds.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://trade-winds.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用Git管理Hexo博客文件</title>
    <link href="https://trade-winds.github.io/2017/05/31/Hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E6%96%B9%E6%B3%95/"/>
    <id>https://trade-winds.github.io/2017/05/31/Hexo博客文件保存方法/</id>
    <published>2017-05-30T16:00:32.000Z</published>
    <updated>2018-01-01T08:58:59.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于如何使用Hexo搭建博客的方法网上有很多教程，例如 <a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">如何搭建一个独立博客——简明Github Pages与Hexo教程</a>。但是对于已经写了很多博客的Hexo，会碰到怎么保存和迁移的问题，毕竟很多情况下我们都会面临更换电脑、更换系统或者我们都多台电脑的问题。<a id="more"></a>为了能够每一台电脑上都能写博客，可能大部分同学想到的方法就是讲整个文件拷贝过去，但其实还有更好的方法。对于我们的hexo博客文件，我们会发现在根目录下是有一个’.gitignore’文件的：  </p><p><div align="center"><img src="http://ok16gn2ql.bkt.clouddn.com/2017/05/31/01.png" alt=".gitignore"></div><br>这就意味着，使用Git来管理我们的hexo博客文件，是官方推荐的方法  </p><h3 id="使用Git管理Hexo"><a href="#使用Git管理Hexo" class="headerlink" title="使用Git管理Hexo"></a>使用Git管理Hexo</h3><p>首先，我们要有已经搭建好的Hexo博客，如何搭建大家可以Google，网上一大堆教程，也可参考前言中的搭建教程<br>搭建好以后，在博客文件的根目录下执行Git操作，并将博客文件全部添加至Git仓库中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ git init</span><br><span class="line">~ git add .</span><br><span class="line">~ git commit -m <span class="string">"init hexo"</span>  //将博客文件提交git</span><br></pre></td></tr></table></figure></p><p>接着将本地Git库提交到远程GitHub或码云等代码托管平台中,这样我们的博客文件就能脱离于电脑独立保存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ git remote add origin git@github.com:xxx/xxx.git</span><br><span class="line">~ git push -u origin master</span><br></pre></td></tr></table></figure></p><h3 id="利用托管的博客文件重建Hexo"><a href="#利用托管的博客文件重建Hexo" class="headerlink" title="利用托管的博客文件重建Hexo"></a>利用托管的博客文件重建Hexo</h3><p>当需要重建Hexo博客时，将远程库中的文件克隆到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ git <span class="built_in">clone</span> git@github.com:xxx/xxx.git</span><br></pre></td></tr></table></figure></p><p>之后确定本地已经安装hexo,即执行安装hexo命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ npm install -g hexo</span><br></pre></td></tr></table></figure></p><p>进入clone至本地的hexo文件根目录中执行部署博客文件的命令，<strong>注意：不要执行<code>hexo init</code>命令，该命令会在该目录下重新初始化hexo，这样我们的文件将会丢失</strong><br>之后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ hexo generate</span><br><span class="line">~ hexo server</span><br><span class="line">~ hexo deploy</span><br></pre></td></tr></table></figure></p><p>等命令就可以在本地重新构建Hexo博客，接着我们之前的博客接着写作，并使用Git管理我们的Blog也非常方便</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;关于如何使用Hexo搭建博客的方法网上有很多教程，例如 &lt;a href=&quot;http://www.jianshu.com/p/05289a4bc8b2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何搭建一个独立博客——简明Github Pages与Hexo教程&lt;/a&gt;。但是对于已经写了很多博客的Hexo，会碰到怎么保存和迁移的问题，毕竟很多情况下我们都会面临更换电脑、更换系统或者我们都多台电脑的问题。
    
    </summary>
    
      <category term="Hexo" scheme="https://trade-winds.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://trade-winds.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://trade-winds.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
